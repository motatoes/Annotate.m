function [ out_bw, varargout ] = markers2image( markerspath, varargin )
%markers2image: takes as input a path to a markers .mat file generated by
%the image_markers utility (Annotate.m) and outputs the resulting binary
%image corresponding to that mat file. tagfilters and output size can be
% specified as optional parameters

    p = inputParser;
    addParameter(p, 'tagsFilter', struct() );
    addParameter(p, 'outputSize', false);

    parse(p, varargin{:})
    tagsFilter = p.Results.tagsFilter;
    output_size = p.Results.outputSize;
    
    %  === MH replace ===
    % GT_img = imread(GT_file);
    serializedObj = getSerializedObject(markerspath);
    org_size = serializedObj.imageSize;
    
    % If output size was not specified make it the same as the one in the
    % markers file variable
    if (output_size == false)
        output_size = [org_size(1) org_size(2)];
    end
    
    % The ratio is the original size divided by the original size
    ratio = output_size(2) / org_size(2);
    [GT_img, gtpixels] = serializedObj2binaryMask( serializedObj , 'scaleratio', ratio, 'outputsize', output_size, ...
                                                    'tagsFilter', tagsFilter);

    GT_img = GT_img > 0;
    out_bw = im2bw(GT_img);
    
    if (nargout == 2) 
       varargout{1} = gtpixels;
    end
end

